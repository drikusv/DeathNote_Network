//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeathNote_Site.DeathNote_WebServer {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DeathNote_WebServer.DeathNote_WebServerSoap")]
    public interface DeathNote_WebServerSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Register", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Register(string Email, string FirstName, string LastName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Register", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RegisterAsync(string Email, string FirstName, string LastName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateActive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CreateActive(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreateActive", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CreateActiveAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool Login(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Login", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> LoginAsync(string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LogOut(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LogOut", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> LogOutAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Friends", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Friends(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Friends", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> FriendsAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FriendRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FriendRequest(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FriendRequest", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> FriendRequestAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AcceptOrDecline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool AcceptOrDecline(bool Accept, string Email, string EmailFrom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AcceptOrDecline", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> AcceptOrDeclineAsync(bool Accept, string Email, string EmailFrom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Users", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Users(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Users", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> UsersAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreatRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool CreatRequest(string Email, string EmailTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CreatRequest", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CreatRequestAsync(string Email, string EmailTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Profile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Profile(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Profile", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ProfileAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditProfile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EditProfile(string FirstName, string LastName, string Email, string NewEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/EditProfile", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> EditProfileAsync(string FirstName, string LastName, string Email, string NewEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChagePassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ChagePassword(string OldPassword, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChagePassword", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> ChagePasswordAsync(string OldPassword, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChageActive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool ChageActive(bool Active, string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ChageActive", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> ChageActiveAsync(bool Active, string Email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DeathNote_WebServerSoapChannel : DeathNote_Site.DeathNote_WebServer.DeathNote_WebServerSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeathNote_WebServerSoapClient : System.ServiceModel.ClientBase<DeathNote_Site.DeathNote_WebServer.DeathNote_WebServerSoap>, DeathNote_Site.DeathNote_WebServer.DeathNote_WebServerSoap {
        
        public DeathNote_WebServerSoapClient() {
        }
        
        public DeathNote_WebServerSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeathNote_WebServerSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeathNote_WebServerSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeathNote_WebServerSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Register(string Email, string FirstName, string LastName, string Password) {
            return base.Channel.Register(Email, FirstName, LastName, Password);
        }
        
        public System.Threading.Tasks.Task<string> RegisterAsync(string Email, string FirstName, string LastName, string Password) {
            return base.Channel.RegisterAsync(Email, FirstName, LastName, Password);
        }
        
        public bool CreateActive(string Email) {
            return base.Channel.CreateActive(Email);
        }
        
        public System.Threading.Tasks.Task<bool> CreateActiveAsync(string Email) {
            return base.Channel.CreateActiveAsync(Email);
        }
        
        public bool Login(string Email, string Password) {
            return base.Channel.Login(Email, Password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string Email, string Password) {
            return base.Channel.LoginAsync(Email, Password);
        }
        
        public bool LogOut(string Email) {
            return base.Channel.LogOut(Email);
        }
        
        public System.Threading.Tasks.Task<bool> LogOutAsync(string Email) {
            return base.Channel.LogOutAsync(Email);
        }
        
        public System.Data.DataSet Friends(string Email) {
            return base.Channel.Friends(Email);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FriendsAsync(string Email) {
            return base.Channel.FriendsAsync(Email);
        }
        
        public System.Data.DataSet FriendRequest(string Email) {
            return base.Channel.FriendRequest(Email);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FriendRequestAsync(string Email) {
            return base.Channel.FriendRequestAsync(Email);
        }
        
        public bool AcceptOrDecline(bool Accept, string Email, string EmailFrom) {
            return base.Channel.AcceptOrDecline(Accept, Email, EmailFrom);
        }
        
        public System.Threading.Tasks.Task<bool> AcceptOrDeclineAsync(bool Accept, string Email, string EmailFrom) {
            return base.Channel.AcceptOrDeclineAsync(Accept, Email, EmailFrom);
        }
        
        public System.Data.DataSet Users(string Email) {
            return base.Channel.Users(Email);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> UsersAsync(string Email) {
            return base.Channel.UsersAsync(Email);
        }
        
        public bool CreatRequest(string Email, string EmailTo) {
            return base.Channel.CreatRequest(Email, EmailTo);
        }
        
        public System.Threading.Tasks.Task<bool> CreatRequestAsync(string Email, string EmailTo) {
            return base.Channel.CreatRequestAsync(Email, EmailTo);
        }
        
        public System.Data.DataSet Profile(string Email) {
            return base.Channel.Profile(Email);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ProfileAsync(string Email) {
            return base.Channel.ProfileAsync(Email);
        }
        
        public bool EditProfile(string FirstName, string LastName, string Email, string NewEmail) {
            return base.Channel.EditProfile(FirstName, LastName, Email, NewEmail);
        }
        
        public System.Threading.Tasks.Task<bool> EditProfileAsync(string FirstName, string LastName, string Email, string NewEmail) {
            return base.Channel.EditProfileAsync(FirstName, LastName, Email, NewEmail);
        }
        
        public bool ChagePassword(string OldPassword, string NewPassword) {
            return base.Channel.ChagePassword(OldPassword, NewPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChagePasswordAsync(string OldPassword, string NewPassword) {
            return base.Channel.ChagePasswordAsync(OldPassword, NewPassword);
        }
        
        public bool ChageActive(bool Active, string Email) {
            return base.Channel.ChageActive(Active, Email);
        }
        
        public System.Threading.Tasks.Task<bool> ChageActiveAsync(bool Active, string Email) {
            return base.Channel.ChageActiveAsync(Active, Email);
        }
    }
}
